#!/bin/sh
#
# Script to work with shell signal trapping to run shell commands in
# all shells. For example using zsh, set the following in ~/.zshrc:
#
# TRAPUSR2() {
#   [ -f ~/.sh-sourceall ] && . ~/.sh-sourceall
# }
# trap TRAPUSR2 USR2
#
# For more information, see:
#
# http://sial.org/howto/shell/allsh/
#
# Warning! This script has various potential security problems,
# especially where multiple users are involved with a shared account
# (root), or where write access to the ~/.sh-sourceall file is possible
# by untrusted users, e.g. via untrusted code injection into the file
# in question, especially if ~/.sh-sourceall is on an insecure network
# file system.
#
# The author disclaims all copyrights and releases this script into the
# public domain.

# routine to signal a process matching an expression with a
# specified signal.
#
# another option might be to have shells write their pids to somewhere
# like ~/.zsh/shellpids/$$, then just run through that file list, though
# cleanup of the files could be problematic
if [ -z "$1" ]; then
  echo "usage: `basename $0` [shell statements|-]"
  exit 1
fi

# TODO test new expression first in a subshell to ensure it will work
# before running it everywhere?

# KLUGE just clobber a known file, which will cause problems if multiple
# 'allsh' are run or if multiple users are involve somehow.
if [ "$1" = '-' ]; then
  cat > ~/.sh-sourceall
else
  echo "$@" > ~/.sh-sourceall
fi

pkill -SIGUSR2 -U $UID $(basename $SHELL)
